<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="20" y="20"><statement name="HANDLER"><block type="basic_show_icon"><field name="i">IconNames.Heart</field><next><block type="serial_writeline"><value name="text"><shadow type="text"><field name="TEXT">starting iot node code</field></shadow></value><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="interface Sensor {" line1="    readSensorData(): SensorData;" line2="    addReporter(reporter: Reporter): void " line3="}" numlines="4"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class SensorImpl implements Sensor {" line1="    sensorId: number;" line2="    sensorName: string;" line3="    " line4="    pinNumber: number;" line5="    units: string; " line6="    reportingInterval: number; // in ms" line7="    sensorBehavior: SensorBehavior;" line8="" line9="    reporters: Reporter[];" line10="" line11="    constructor(theSensorId: number, theSensorName: string, thePinNumber: number, " line12="                theUnits: string, theReportingInterval: number, theSensorBehavior: SensorBehavior) {" line13="            this.sensorId = theSensorId;" line14="            this.sensorName = theSensorName;" line15="            this.pinNumber = thePinNumber;" line16="            this.units = theUnits;" line17="            this.reportingInterval = theReportingInterval;" line18="            this.sensorBehavior = theSensorBehavior;" line19="            this.reporters = [];" line20="" line21="            control.setInterval(function() {" line22="" line23="            }, this.reportingInterval, control.IntervalMode.Interval);" line24="    }" line25="" line26="    addReporter(reporter: Reporter): void {" line27="        this.reporters.push(reporter);" line28="    }" line29="" line30="    readSensorData(): SensorData {" line31="        const sensorValue = " line32="            this.sensorBehavior.readValue(this.pinNumber);" line33="" line34="        return {" line35="            sensorName: this.sensorName," line36="            sensorType: this.sensorBehavior.getSensorTypeName()," line37="            pinNumber: this.pinNumber," line38="            value: sensorValue," line39="            units: this.units, " line40="            timeStamp: control.eventTimestamp().toString()" line41="        } as SensorData;" line42="    }" line43="" line44="    reportSensorData(): void{" line45="        // Read Sensor Data" line46="        const sensorData = this.readSensorData();" line47="        // Add Data to Reporting queue" line48="        this.reporters.forEach(reporter =&gt; reporter.report(sensorData));" line49="    }" line50="" line51="}" numlines="52"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="interface SensorData {" line1="    sensorName: string;" line2="    sensorType: string;" line3="    pinNumber: number;" line4="" line5="    value: number;" line6="    units: string; " line7="" line8="    timeStamp: string;" line9="}" numlines="10"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class SensorImplBuilder {" line1="    sensorId: number;" line2="    sensorName: string;" line3="    " line4="    pinNumber: number;" line5="    units: string; " line6="    reportingInterval: number; // in ms" line7="    sensorBehavior: SensorBehavior;" line8="" line9="    constructor() {" line10="        this.sensorId = 0;" line11="        this.sensorName = '';" line12="        this.pinNumber = 0;" line13="        this.units = '';" line14="        this.reportingInterval = 0;" line15="        this.sensorBehavior = new NullSensorBehavior();" line16="    }" line17="" line18="    setId(theId: number): SensorImplBuilder {" line19="        this.sensorId = theId;" line20="        return this;       " line21="    }" line22="" line23="    setName(theName: string): SensorImplBuilder {" line24="        this.sensorName = theName;" line25="        return this;" line26="    }" line27="" line28="    setPinNumber(thePinNumber: number): SensorImplBuilder {" line29="        this.pinNumber = thePinNumber;" line30="        return this;" line31="    }" line32="" line33="    setUnits(theUnits: string): SensorImplBuilder {" line34="        this.units = theUnits;" line35="        return this;" line36="    }" line37="" line38="    setReportingInterval(theReportingInterval: number): SensorImplBuilder {" line39="        this.reportingInterval = theReportingInterval;" line40="        return this;" line41="    }" line42="" line43="    setSensorBehavior(theSensorBehavior: SensorBehavior): SensorImplBuilder {" line44="        this.sensorBehavior = theSensorBehavior;" line45="        return this; " line46="    }" line47="" line48="    build() :SensorImpl {" line49="        return new SensorImpl(this.sensorId, this.sensorName, this.pinNumber," line50="        this.units,this.reportingInterval, this.sensorBehavior);" line51="    }" line52="" line53="" line54="}" numlines="55"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="interface SensorBuilder {" line1="    setId(theId: number): SensorBuilder;" line2="" line3="    setName(theName: string): SensorBuilder;" line4="" line5="    setPinNumber(thePinNumber: number): SensorBuilder;" line6="" line7="    setUnits(theUnits: string): SensorBuilder;" line8="" line9="    setReportingInterval(theReportingInterval: number): SensorBuilder;" line10="" line11="    setSensorBehavior(theSensorBehavior: SensorBehavior): SensorBuilder;" line12="" line13="    build(): Sensor;" line14="}" numlines="15"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="interface SensorBehavior {" line1="    getSensorTypeName(): string;" line2="    readValue(pinNumber: number): number;" line3="}" numlines="4"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class NullSensorBehavior implements SensorBehavior {" line1="    getSensorTypeName(): string {" line2="        return '';" line3="    }" line4="" line5="    readValue(pinNumber: number): number {" line6="        return 0;" line7="    }" line8="}" numlines="9"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class MockSensorBehavior implements SensorBehavior {" line1="    getSensorTypeName(): string {" line2="        return 'fake sensor'" line3="    }" line4="" line5="    readValue(pinNumber: number): number {" line6="        return 0;" line7="    }" line8="}" numlines="9"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="interface Reporter {" line1="    report(data: any): void;" line2="}" numlines="3"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class RadioReporterImpl implements Reporter {" line1="    report(data: any): void {" line2="        radio.sendString(this.encodeData(data));" line3="    }" line4="" line5="    encodeData(data: any) {" line6="        return JSON.stringify(data);" line7="    }" line8="}" numlines="9"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class SerialReporterImpl implements Reporter {" line1="    report(data: any): void {" line2="        serial.writeLine((JSON.stringify(data)));" line3="    }" line4="}" numlines="5"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class MicrobitNodeImpl implements MicrobitNode {" line1="    sensors: Sensor[];" line2="    " line3="    constructor() {" line4="        this.sensors = [];" line5="    }" line6="" line7="    addSensor(newSensor: Sensor) {" line8="        this.sensors.push(newSensor);" line9="    }" line10="}" numlines="11"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="interface MicrobitNode {" line1="    addSensor(sensor: Sensor): void;" line2="}" numlines="3"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const primaryReporter: Reporter = new SerialReporterImpl();" numlines="1" declaredvars="primaryReporter"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const sensorBuilder: SensorBuilder = new SensorImplBuilder();" numlines="1" declaredvars="sensorBuilder"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="sensorBuilder.setId(0);" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="sensorBuilder.setName(&quot;dummy&quot;)" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="sensorBuilder.setPinNumber(0);" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="sensorBuilder.setReportingInterval(3);" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="sensorBuilder.setUnits(&quot;un&quot;);" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="sensorBuilder.setSensorBehavior(new MockSensorBehavior());" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const fakeSensor: Sensor = sensorBuilder.build();" numlines="1" declaredvars="fakeSensor"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="fakeSensor.addReporter(primaryReporter);" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const microbitNode = new MicrobitNodeImpl();" numlines="1" declaredvars="microbitNode"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="microbitNode.addSensor(fakeSensor);" numlines="1"></mutation><next><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="primaryReporter.report(fakeSensor.readSensorData());" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_forever" x="1029" y="20"/><block type="control_in_background" x="671" y="7240"/></xml>